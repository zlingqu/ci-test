variables:
  DOCKER_REGIS_URL: "docker.dm-ai.cn" #docker仓库地址
  PROJECT_NAME: devops #项目代号，也是k8s的namespace的名字
  SERVER_NAME: ci-test #服务名
  # IMAGE_TAG_NAME: "${DOCKER_REGIS_URL}/${PROJECT_NAME}/${SERVER_NAME}:${CI_COMMIT_SHA}"  #使用代码的commitid作为image的tag
  IMAGE_TAG_NAME: "${DOCKER_REGIS_URL}/${PROJECT_NAME}/${SERVER_NAME}:${CI_RUNNER_TAGS}" #使用代码的tag名字作为image的tag
  RUNNER_TYPE: docker #定义runner的类型，比如docker-runner、k8s-runner，需要管理员在全局配置shared类型的runner
  BRANCH_CHOICE: tags #只有在特殊的分支才触发流程，支持正则，可选的比如dev、dev*、tags，其中tags表示只在tag上能执行

stages:
  - build
  - make_and_push_image
  - k8s_deploy
  
job_build:
  image: golang:1.15-alpine
  stage: build
  script:
    - go build -o targets/${SERVER_NAME} -v ./
  artifacts:
    expire_in: 3 mos #制品包在gitlab上的保存时间（每小时定时删除过期制品），如果不设置，将永久保存。
    paths:
      - targets/
#   only:
#     - $BRANCH_CHOICE #只有打tag时才执行
  tags: 
    - '${RUNNER_TYPE}'

job_make_and_push_image:
  image: 
    name: docker.dm-ai.cn/public/kaniko-executor:debug-v1.3.0
    entrypoint: [""]
  stage: make_and_push_image
  script:
    - echo "{\"auths\":{\"$DOCKER_REGIS_URL\":{\"username\":\"$REGISTRY_USERNAME\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_TAG_NAME #使用kaniko代替dind/sokcet模式，打镜像和上传
#   only:
#     - $BRANCH_CHOICE #只有打tag时才执行
  tags: 
    - '${RUNNER_TYPE}'

job_k8s_deploy:
  image: 
    name: docker.dm-ai.cn/public/alpine:kubectl-1.18.10
  stage: k8s_deploy
  script:
    - cd /root
    - echo $kube_config_dev|base64 -d > .kube/config
    - kubectl set image deployment/$SERVER_NAME $SERVER_NAME=$IMAGE_TAG_NAME -n $PROJECT_NAME
  when: manual #只能在gitlab-ui上手动操作，不会自动执行
#   only:
#     - $BRANCH_CHOICE #只有打tag时才执行
  tags: 
    - '${RUNNER_TYPE}'
