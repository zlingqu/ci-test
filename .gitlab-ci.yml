variables:
  DOCKER_REGIS_URL: "docker.dm-ai.cn" #docker仓库地址
  PROJECT_NAME: devops #项目代号，也是k8s的namespace的名字
  SERVER_NAME: ci-test #服务名
  IMAGE_TAG_NAME: "${DOCKER_REGIS_URL}/${PROJECT_NAME}/${SERVER_NAME}:${CI_COMMIT_SHA}"  #使用代码的commitid作为image的tag
  # IMAGE_TAG_NAME: "${DOCKER_REGIS_URL}/${PROJECT_NAME}/${SERVER_NAME}:${CI_RUNNER_TAGS}" #使用代码的tag名字作为image的tag

stages:
  - build
  - make_and_push_image
  - edit_k8s_yaml

job_build:
  image: golang:1.15-alpine
  stage: build
  script:
    - export GOPROXY=https://mirrors.aliyun.com/goproxy/
    - go build -o targets/${SERVER_NAME} -v ./
  artifacts:
    expire_in: 3 mos #制品包在gitlab上的保存时间（每小时定时删除过期制品），如果不设置，将永久保存。
    paths:
      - targets/
#   only:
#     - tags #只有打tag时才执行
  tags:
    - k8s-runner
job_make_and_push_image:
  image: 
    name: docker.dm-ai.cn/public/kaniko-executor:debug-v1.6.0
    entrypoint: [""]
  stage: make_and_push_image
  script:
    - echo "{\"auths\":{\"$DOCKER_REGIS_URL\":{\"username\":\"$DOCKER_REGISTRY_USERNAME\",\"password\":\"$DOCKER_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_TAG_NAME #使用kaniko代替dind/sokcet模式，打镜像和上传
    - echo "docker image is:" && echo $IMAGE_TAG_NAME
#   only:
#     - tags #只有打tag时才执行
  tags:
    - k8s-runner

job_edit_k8s_yaml:
  image: 
    name: docker.dm-ai.cn/public/kustomize:0.2
  stage: edit_k8s_yaml
  script:
    - git clone -b dev git@gitlab.dm-ai.cn:devops/adp/deployment.git
    - cd deployment/devops/ci-test/overlays/dev
    - kustomize edit set image ${DOCKER_REGIS_URL}/${PROJECT_NAME}/${SERVER_NAME}=$IMAGE_TAG_NAME
    - git commit -am "更新镜像版本为$IMAGE_TAG_NAME"
    - git push
#   only:
#     - tags #只有打tag时才执行
  tags:
    - k8s-runner
